"""
Django settings for TOGATHER project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from datetime import timedelta
from pathlib import Path

import os
import json
import sys

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


SECRET_BASE_FILE = os.path.join(BASE_DIR, "secrets.json")
secrets = json.loads(open(SECRET_BASE_FILE).read())
for key, value in secrets.items():
    setattr(sys.modules[__name__], key, value)

ALLOWED_HOSTS = ["test.wouldyou.in"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False


# Storage
DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
STATICFILES_STORAGE = "storages.backends.s3boto3.S3StaticStorage"
AWS_STORAGE_BUCKET_NAME = "togather"

# AWS_ACCESS_KEY_ID -> In secrets.json
# AWS_SECRET_ACCESS_KEY -> In secrets.json
# AWS_S3_ENDPOINT_URL -> In secrets.json
AWS_S3_CUSTOM_DOMAIN = "file.wouldyou.in/togather"
AWS_QUERYSTRING_AUTH = False
AWS_CLOUDFRONT_KEY = None  # https
AWS_CLOUDFRONT_KEY_ID = None


# EMAIL
EMAIL_HOST = "smtp.dooray.com"
EMAIL_PORT = 465
EMAIL_HOST_USER = "no-reply@wouldyou.in"
# EMAIL_HOST_PASSWORD -> In secrets.json
EMAIL_USE_SSL = True
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# REDIS_SERVER_LOCATION -> In secrets.json
# REDIS_SERVER_PASSWORD -> In secrets.json

# Redis

CACHES = {
    # pylint: disable=undefined-variable
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_SERVER_LOCATION,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": REDIS_SERVER_PASSWORD,
        },
    }
}

# Use Redis as Session Backend
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

# DB_SERVER_HOST -> In secrets.json
# DB_SERVER_PORT -> In secrets.json
# DB_SERVER_USER -> In secrets.json
# DB_SERVER_PASSWORD -> In secrets.json
# DB_SERVER_NAME -> In secrets.json

# Database
DATABASES = {
    # pylint: disable=undefined-variable
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": DB_SERVER_NAME,
        "USER": DB_SERVER_USER,
        "PASSWORD": DB_SERVER_PASSWORD,
        "HOST": DB_SERVER_HOST,
        "PORT": DB_SERVER_PORT,
    }
}


# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Storage
    "storages",
    # REST FRAMEWORK
    "rest_framework",
    "rest_framework_simplejwt",
    # toGather
    "user",
    "togather_auth",
    "togather_apply",
    "togather_question",
    "togather_promotion",
]

# JWT
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=2),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=14),
    # "ROTATE_REFRESH_TOKENS": False,
    # "BLACKLIST_AFTER_ROTATION": True,
}


# REST_FRAMEWORK
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",  # 기본 API 인증 필요
    ),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_RENDERER_CLASSES": (
        "rest_framework.renderers.JSONRenderer",  # User Interface 제거
        # "rest_framework.renderers.BrowsableAPIRenderer",
    ),
    "DATETIME_FORMAT": "%Y-%m-%dT%H:%M:%S.%f",
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "TOGATHER.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "TOGATHER.wsgi.application"

# Custom User Model
AUTH_USER_MODEL = "user.User"


AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "ko-kr"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
